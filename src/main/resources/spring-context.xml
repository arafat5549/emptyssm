<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-4.0.xsd
	"
	default-lazy-init="true">
	
    <!-- #################载入常用的配置################# -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    
    <!-- 注解扫#################描所有包################# -->
    <context:component-scan  base-package="com.ssf.system.*">
       <!-- 不扫描@Controller注解交给SpringMVC -->
       <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

	<context:annotation-config/><!-- 开启注解 -->
	
	<!-- #################数据源配置，不使用ORM框架 #################
	<bean id="dataSource" 
	class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
	    <property name="driverClassName" value="${jdbc.driverClassName}"  ref="${111.xxx}"/>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
	</bean>
	-->
	<!-- #################数据源配置, 数据库连接池Druid################# -->
	<bean id="dataSource"
	class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.pool.init}" />
		<property name="minIdle" value="${druid.pool.minIdle}" /> 
		<property name="maxActive" value="${druid.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters，wall用于防止sql注入，stat用于统计分析 -->
	    <property name="filters" value="wall,stat" /> 
	</bean>
	 
	<!-- 自己写的DBUtils --> 
	<bean id="dbUtils" class="com.ssf.utils.DBUtils">
	     <property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- #################MyBtais设置################# -->
	<!-- 整合Mybatis#数据源交给MyBatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.ssf.system.model"/><!-- 别名 -->
        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/><!-- **代表任意嵌套目录 -->
        <!--配置mybatis全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    
     <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
   <!-- 接口扫描需要注意你的Mapper文件的namespace <mapper namespace="com.ssf.dao.IUserDao">
   一定要与你的接口类名一致 --> 
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.ssf.system.dao"/>
    </bean>
    
    <!-- ################自定义AOP################# -->
    <!-- 自定义AOP类  一般都是在业务层处理 -->
    <bean id="myProxy" class="com.ssf.system.proxy.MyAopProxy"></bean>
    <aop:config>
       <aop:pointcut expression="execution(* com.ssf.system.service.*.*(..))" id="pc"/>
       
       <aop:aspect ref="myProxy">
            <aop:before pointcut-ref="pc" method="breforPerformance"/>
            <aop:after  pointcut-ref="pc" method="afterPerformance"/>
            <aop:around pointcut-ref="pc" method="aroundMethod"/>
        </aop:aspect>
    </aop:config>
    
     <!-- ################事务处理################# -->
    <!-- 事务处理 Spring的事务处理以AOP为基础 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="txadvice" transaction-manager="transactionManager">
        <!-- 事务的传播机制#默认为REQUIRED 如果没有事务则开事务，如果有就使用已经存在的事务 -->
        <tx:attributes>
            <tx:method name="save*"     propagation="REQUIRED"/>
            <tx:method name="delete*"   propagation="REQUIRED"/>
            <tx:method name="update*"   propagation="REQUIRED"/>
            <tx:method name="transfer*" propagation="REQUIRED"/>
            <tx:method name="insert*"   propagation="REQUIRED"/>
            <tx:method name="change*"   propagation="REQUIRED"/>
            <tx:method name="do*"       propagation="REQUIRED" />
            <!--  --> 
            <tx:method name="*"         propagation="REQUIRED" read-only="true"/>
           
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
    	<aop:pointcut expression="execution(* com.ssf.system.service.*.*(..))" id="txpointcut"/>
    	<aop:advisor advice-ref="txadvice" pointcut-ref="txpointcut"/>
    </aop:config>
    
    <tx:annotation-driven/><!-- 开启事务注解 -->
    
     <!-- ################缓存Ehcache################# -->
     <!-- 
	 <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
          p:cacheManager-ref="ehcacheManager"/>
     -->   
     <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
       <property name="cacheManager" ref="ehcacheManager"/>
     </bean>
     <!-- 
     <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
        p:configLocation="classpath:ehcache-local.xml"/>
      -->
      <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
       <property name="configLocation" value="classpath:ehcache-local.xml"/>
     </bean>
     <cache:annotation-driven/>   <!--开启缓存注解--> 
     
     
	<!-- ################任务调度系统Quartz################ -->
	 
</beans>